# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'consultas.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QStandardItemModel, QStandardItem
from banco import Acesso_banco
from ficha_individual3 import Ui_Dialog5
import os



class Ui_Dialog4(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.setFixedSize(773, 600)
        iconTela = QtGui.QIcon()
        iconTela.addFile("img/enfermagem.png")
        Dialog.setWindowIcon(iconTela)
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(170, -15, 411, 61))
        self.label.setObjectName("label")
        self.tableView = QtWidgets.QTableView(Dialog)
        self.tableView.setGeometry(QtCore.QRect(10, 130, 751, 461))
        self.tableView.setObjectName("tableView")
        self.horizontalLayoutWidget = QtWidgets.QWidget(Dialog)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(10, 40, 751, 41))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label_2 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout.addWidget(self.label_2)
        self.cmbNomeAtendido = QtWidgets.QComboBox(Dialog)
        self.cmbNomeAtendido.setGeometry(QtCore.QRect(160, 50, 578, 20))
        self.cmbNomeAtendido.setObjectName("cmbNomeAtendido")
        self.edtPesquisaNome = QtWidgets.QLineEdit(Dialog)
        self.edtPesquisaNome.setGeometry(QtCore.QRect(558, 28, 180, 20))
        self.edtPesquisaNome.setObjectName("edtPesquisaNome")
        self.edtPesquisaNome.hide()
        self.pushButton = QtWidgets.QPushButton(Dialog)
        self.pushButton.setGeometry(QtCore.QRect(390, 90, 201, 31))
        self.pushButton.setObjectName("pushButton")
        self.btnAtualizar = QtWidgets.QPushButton(Dialog)
        self.btnAtualizar.setGeometry(QtCore.QRect(150, 90, 201, 31))
        self.btnAtualizar.setObjectName("btnAtualizar")

        # BOTÃO QUE PESQUISA O NOME DIGITADO
        self.btnPesquisaNome = QtWidgets.QPushButton(Dialog)
        iconPesquisaNome = QtGui.QIcon()
        iconPesquisaNome.addPixmap(QtGui.QPixmap("img/pesquisa.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btnPesquisaNome.setIcon(iconPesquisaNome)
        self.btnPesquisaNome.setIconSize(QtCore.QSize(19, 19))
        self.btnPesquisaNome.setGeometry(QtCore.QRect(740, 27, 21, 21))
        self.btnPesquisaNome.setObjectName("btnPesquisaNome")
        self.btnPesquisaNome.hide()

        # BOTÃO QUE MOSTRA O CAMPO PARA PESQUISAR ALGUM NOME
        self.btnFechado = QtWidgets.QPushButton(Dialog)
        iconFechado = QtGui.QIcon()
        iconFechado.addPixmap(QtGui.QPixmap("img/cadeadoVermelho.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btnFechado.setIcon(iconFechado)
        self.btnFechado.setIconSize(QtCore.QSize(22, 22))
        self.btnFechado.setGeometry(QtCore.QRect(740, 50, 20, 20))
        self.btnFechado.setObjectName("btnFechado")
        self.btnFechado.show()

        # BOTÃO QUE FECHA O CAMPO QUE FOI ABERTO
        self.btnAberto = QtWidgets.QPushButton(Dialog)
        iconAberto = QtGui.QIcon()
        iconAberto.addPixmap(QtGui.QPixmap("img/cadeadoVerde.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btnAberto.setIcon(iconAberto)
        self.btnAberto.setIconSize(QtCore.QSize(22, 22))
        self.btnAberto.setGeometry(QtCore.QRect(740, 50, 20, 20))
        self.btnAberto.setObjectName("btnFechado")
        self.btnAberto.hide()

        self.lblErro = QtWidgets.QLabel(Dialog)
        self.lblErro.setGeometry(QtCore.QRect(600, 11, 110, 20))
        self.lblErro.setObjectName("lblErro")
        self.lblErro.hide()


        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

        #Chamando método que conecta no banco
        self.banco = Acesso_banco.Banco_de_dados()
        self.banco.conectar()

        #Chamando a lista de pacientes através do botão atualizar
        self.btnAtualizar.clicked.connect(self.listar_pacientes)

        #Botão que faz pesquisa do paciente mediante nome escrito no campo
        self.pushButton.clicked.connect(self.pesquisa_paciente)

        #Chamando o método de listar os pacientes
        self.listar_pacientes()

        #Chamando método que recupera paciente
        self.recuperar_paciente()

        #Chamando método que pega os dados do paciente e abre uma tela com todos atendimentos através do clique
        self.tableView.clicked.connect(self.selectRow)

        # Chamando método que abre o campo de pesquisa através do botão do cadeado vermelho
        self.btnFechado.clicked.connect(self.abre_campo_de_pesquisa)

        # Chamando método que fecha o campo de pesquisa através do botão do cadeado verde
        self.btnAberto.clicked.connect(self.fecha_campo_de_pesquisa)

        # Chamando método que pesquisa nome de acordo com o que foi digitado
        self.btnPesquisaNome.clicked.connect(self.busca_paciente)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "SISTEMA AMBULATÓRIO - FICHAS DE ATENDIMENTOS"))
        self.label.setText(_translate("Dialog", "<html><head/><body><p align=\"center\"><span style=\" font-size:14pt; font-weight:600;\">FICHAS DE ATENDIMENTOS COM ALTA</span></p></body></html>"))
        self.label_2.setText(_translate("Dialog", "Pesquisar nome do paciente:"))
        self.pushButton.setText(_translate("Dialog", "CONSULTAR"))
        self.btnAtualizar.setText(_translate("Dialog", "ATUALIZAR"))

    # Este método irá carregar os dados do banco e irá mostrar na tableView
    def listar_pacientes(self):
        self.resultado = self.banco.recupera_atendidos_e_quantidade_nao()
        model = QStandardItemModel()
        model.clear()
        model.setColumnCount(6)
        colunas = []
        colunas.append("NOME DO ATENDIDO(A)")
        colunas.append("MINISTÉRIO / CARGO")
        colunas.append("CIDADE")
        colunas.append("ESTADO")
        colunas.append("PAÍS")
        colunas.append("N° DE ATENDIMENTOS")
        model.setHorizontalHeaderLabels(colunas)
        for dados in self.resultado:
            row = []
            for dado in dados[0]:
                lista = str(dado)
                item = QStandardItem(lista)
                item.setEditable(False)
                row.append(item)
            model.appendRow(row)
        self.tableView.setModel(model)
        self.banco.db.commit()


    #Este método fará a busca do paciente pelo nome e depois limpará o campo
    def pesquisa_paciente(self):
        modelPesquisa = QStandardItemModel()
        modelPesquisa.clear()
        modelPesquisa.setColumnCount(6)
        colunasPesquisada = []
        colunasPesquisada.append("NOME DO ATENDIDO(A)")
        colunasPesquisada.append("MINISTÉRIO / CARGO")
        colunasPesquisada.append("CIDADE")
        colunasPesquisada.append("ESTADO")
        colunasPesquisada.append("PAÍS")
        colunasPesquisada.append("N° DE ATENDIMENTOS")
        modelPesquisa.setHorizontalHeaderLabels(colunasPesquisada)
        valor = self.cmbNomeAtendido.currentText()
        resposta = self.banco.recupera_paciente_mediante_valor_recebido_nao(valor)
        for dados in resposta:
            row = []
            for nome in dados:
                pesquisado = str(nome)
                itemPesquisa = QStandardItem(pesquisado)
                itemPesquisa.setEditable(False)
                row.append(itemPesquisa)
            modelPesquisa.appendRow(row)

        self.tableView.setModel(modelPesquisa)

    # EVENTO QUE RECUPERA OS DADOS DO PACIENTE E ATRIBUI NA COMBOBOX
    def recuperar_paciente(self):
        self.cmbNomeAtendido.clear()
        dados = self.banco.recuperar_paciente_ja_atendido_nao()
        for dado in dados:
            self.cmbNomeAtendido.addItem(dado[0])
        self.banco.db.commit()

    # Método para selecionar o paciente e uma tela abrirá com todos os atendimentos daquele paciente
    def selectRow(self):
        index = self.tableView.selectionModel().selectedIndexes()[0]
        rows = {index.row()}
        output = []
        for row in rows:
            row_data = []
            for column in range(self.tableView.model().columnCount()):
                index = self.tableView.model().index(row, column)
                row_data.append(index.data())
            output.append(row_data)
        os.environ['nome_paciente'] = output[0][0]
        #ESSE MÉTODO CHAMA A TELA DO PACIENTE QUE FOI CLICADO E JÁ PREENCHE OS CAMPOS DE ACORDO COM O PACIENTE
        self.abrir_ficha_individual()

    def abrir_ficha_individual(self):
        telaIndividual = QtWidgets.QDialog()
        ui = Ui_Dialog5()
        ui.setupUi(telaIndividual)
        self.tableView.setDisabled(True)
        self.cmbNomeAtendido.setDisabled(True)
        self.btnAtualizar.setDisabled(True)
        self.pushButton.setDisabled(True)
        telaIndividual.show()
        retornoIndividual = telaIndividual.exec_()
        if retornoIndividual == 0:
            self.tableView.setDisabled(False)
            self.cmbNomeAtendido.setDisabled(False)
            self.btnAtualizar.setDisabled(False)
            self.pushButton.setDisabled(False)
            self.recuperar_paciente()
            self.listar_pacientes()

    #EVENTO QUE ABRE O CAMPO
    def abre_campo_de_pesquisa(self):
        self.btnFechado.hide()
        self.btnAberto.show()
        self.edtPesquisaNome.show()
        self.btnPesquisaNome.show()

    #EVENTO QUE FECHA O CAMPO
    def fecha_campo_de_pesquisa(self):
        self.btnAberto.hide()
        self.btnFechado.show()
        self.edtPesquisaNome.hide()
        self.edtPesquisaNome.clear()
        self.btnPesquisaNome.hide()
        self.lblErro.hide()

    #EVENTO QUE BUSCA O NOME DO PACIENTE DE ACORDO COM O QUE FOI DIGITADO NO CAMPO
    def busca_paciente(self):
        nome = self.edtPesquisaNome.text()
        pega_nome = self.banco.busca_paciente(nome)
        try:
            self.lblErro.hide()
            self.cmbNomeAtendido.setCurrentText(pega_nome[0][0])
        except:
            self.lblErro.setText("<span style=\"color:red\">Este nome não existe</span>")
            self.lblErro.show()





if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog4()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
